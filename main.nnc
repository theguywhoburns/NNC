#use <std.printf>
// #use <std.*>
#use <nstd>

#rule(classes)

#variable(name, type=identifier)

#syntax(decl = class #name; def = class #name { ..., $#name($...) = ctor, $~#name($...) = dtor}; )

#decl_func(ctor = #name)
#decl_func(dtor = ~#name)

#usage(class = type, struct, call)
#usage(ctor = callable)
#usage(dtor = callable, function_end && not_used ? call)
#usage(name = type)

#rule_end(classes)

class Hello {
	Hello()=default;
	~Hello() {
		nstd.println("This is a dtor lol");
	}
};

int main() {
	// So each value/object will have it's type stored in it's header
	printf("Hello World!\n");
	nstd.print("Hello {}","World");
	nstd.println();

	return 0;
}